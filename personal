#GRUB to boot linux image:
set root=(hd0,msdos1)
insmod normal
configfile (hd0,msdos1)/boot/grub/grub.cfg

##################################################installing openCV3#################################################
sudo apt-get update
sudo apt-get upgrade

#Remove any previous installations of x264</h3>
sudo apt-get remove x264 libx264-dev
 
#Dependencies:
sudo apt-get install build-essential checkinstall cmake pkg-config yasm
sudo apt-get install git gfortran
sudo apt-get install libjpeg8-dev libjasper-dev libpng12-dev
sudo apt-get install libtiff4-dev 
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
sudo apt-get install libxine2-dev libv4l-dev
sudo apt-get install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
sudo apt-get install qt5-default libgtk2.0-dev libtbb-dev
sudo apt-get install libatlas-base-dev
sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
sudo apt-get install libvorbis-dev libxvidcore-dev
sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install x264 v4l-utils

#python libraries
sudo apt-get install python-dev python-pip python3-dev python3-pip
sudo -H pip2 install -U pip numpy
# Install virtual environment
sudo pip2 install virtualenv virtualenvwrapper --ignore-installed six
sudo pip3 install virtualenv virtualenvwrapper --ignore-installed six
echo "# Virtual Environment Wrapper"  >> ~/.bashrc
echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
source ~/.bashrc
 
# create virtual environment
mkvirtualenv facecourse-py2 -p python2
workon facecourse-py2
  
# now install python libraries within this virtual environment
pip install numpy scipy matplotlib scikit-image scikit-learn ipython
  
# quit virtual environment
deactivate

git clone https://github.com/opencv/opencv.git
cd opencv 
git checkout 3.3.1 
cd ..

git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout 3.3.1
cd ..

cd opencv
mkdir build
cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D INSTALL_C_EXAMPLES=ON \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D WITH_TBB=ON \
      -D WITH_V4L=ON \
      -D WITH_QT=ON \
      -D WITH_OPENGL=ON \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
      -D BUILD_EXAMPLES=ON ..
      
# find out number of CPU cores in your machine
nproc
# substitute 4 by output of nproc
make -j4
sudo make install
sudo sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
sudo ldconfig
find /usr/local/lib/ -type f -name "cv2*.so"

##################################################installing libfreenect2#################################################
cd
mkdir git
cd git
git clone https://github.com/OpenKinect/libfreenect2.git
cd depends; ./download_debs_trusty.sh
sudo apt-get install build-essential cmake pkg-config
sudo dpkg -i debs/libusb*deb
sudo apt-get install libturbojpeg libjpeg-turbo8-dev
sudo dpkg -i debs/libglfw3*deb; sudo apt-get install -f
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/freenect2
make
make install

#optional:  run test program ./bin/Protonect




######################################################installing ROS######################################################
#installing ROS
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
sudo apt-get update
sudo apt-get install ros-indigo-desktop-full
sudo rosdep init
rosdep update
echo "source /opt/ros/indigo/setup.bash" >> ~/.bashrc
source ~/.bashrc
sudo apt-get install python-rosinstall

cd
mkdir catkin_ws
cd catkin_ws
mkdir src

#########################################installing pleora for thermal camera#############################################
#Download latest version from https://supportcenter.pleora.com/s/article/eBUS-SDK-Software-and-Release-Notes-Dwnload
cd Downloads
sudo ./eBUS_SDK_4.1.7.3988_Ubuntu-14.04-x86_64.run
cd /opt/pleora/ebus_sdk/Ubuntu-14.04-x86_64/bin
sudo ./install_daemon.sh
#Select 1 - Install the daemon and automatically load at boot time.
source /opt/pleora/ebus_sdk/Ubuntu-14.04-x86_64/bin/set_puregev_env
sudo apt-get install libudev-dev
cd /usr/lib/x86_64-linux-gnu
sudo ln -s libudev.so libudev.so.1
echo 'source /opt/pleora/ebus_sdk/Ubuntu-14.04-x86_64/bin/set_puregev_env' >> ~/.bashrc
source ~/.bashrc
#to test the pleora software: optional
#sudo ./opt/pleora/ebus_sdk/Ubuntu-14.04-x86_64/share/samples/build.sh
#sudo ./opt/pleora/ebus_sdk/Ubuntu-14.04-x86_64/share/samples/DeviceFinder/DeviceFinder
sudo apt-get upgrade
sudo apt-get update


######################################building hrl_thermal_camera for catkin_ws###########################################
cd
sudo apt-get install ros-indigo-stereo-image-proc
cd catkin_ws/src
git clone https://github.com/gt-ros-pkg/hrl.git
git clone https://github.com/ros-drivers/usb_cam.git
cd hrl/hrl_thermal_camera
git checkout origin/hydro-devel
cd ~/catkin_ws
catkin_make --only_packages_with_deps usb_cam
catkin_make --only_packages_with_deps hrl_thermal_camera
echo 'source /home/henry/catkin_ws/devel/setup.bash' >> ~/.bashrc



